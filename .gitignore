# .gitignore for mini_stl project

# === Build Artifacts ===
# CMake build directory
# Typically, CMake generates build files in a 'build' directory at the root.
# This might be 'build/', 'bin/', 'out/', etc. Adjust as needed.
build/
bin/
out/
debug/
release/
.cache/

guide.md

# Executables
# For Linux/macOS
*.out
*.exe # For Windows executables if you cross-compile or develop there
*.app # macOS application bundles

# Object files and libraries
*.o
*.obj
*.lo
*.la
*.so # Shared library (Linux)
*.dylib # Dynamic library (macOS)
*.dll # Dynamic link library (Windows)
*.a # Static library (Linux/macOS)
*.lib # Static library (Windows)

# CMake-specific files
CMakeCache.txt
CMakeFiles/
cmake_install.cmake
install_manifest.txt
CTestTestfile.cmake
Makefile # If you use make directly, keep this. If CMake generates it, it's fine.

# Dependency management (e.g., vcpkg, Conan)
# If you use these for external libraries later, their build dirs.
# vcpkg specific build artifacts (e.g., installed libraries within the vcpkg_installed tree)
vcpkg_installed/
conan/

# === Editor/IDE specific files ===
# Visual Studio Code
.vscode/ # This can sometimes contain launch.json, tasks.json. If you want to share, remove this.
         # For competitive programming, I often share launch.json, but for a project,
         # it's often user-specific. Consider `.vscode/*.json` instead if you want to
         # ignore some but keep others.
.history/
.vscode-test/

# Vim/NeoVim
*.swp # Vim swap files
*.swo
*.swn
*.bak # Backup files
*~    # Emacs backup files
.netrwhist # Netrw history

# JetBrains IDEs (e.g., CLion)
.idea/

# Xcode (macOS/iOS development)
*.xcodeproj/
*.xcworkspace/
xcuserdata/
DerivedData/

# Sublime Text
*.sublime-project
*.sublime-workspace

# Atom
.atom/

# VS Code - CMake Tools Extension
.cmake/

# === Operating System Temporary Files ===
# macOS
.DS_Store
.Trashes
ehthumbs.db
.Spotlight-V100
.TemporaryItems
.fseventsd
Icon?

# Windows
Thumbs.db
Desktop.ini

# === Log and Temp Files ===
*.log
*.tmp
*.temp
/tmp/

# === Project-specific ignored files ===
# For example, if you generate documentation
docs/build/
*.html # If generated
*.pdf # If generated

# Test output files (if any are generated by your tests)
test_results.txt
coverage/

# GDB/LLDB History
.gdb_history
.lldb_history

# Doxygen related output
html/
latex/
